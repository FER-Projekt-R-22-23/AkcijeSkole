// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using IzvidaciAkcijeSkoleWebApi.Data.Models;

namespace IzvidaciAkcijeSkoleWebApi.Data
{
    public partial class AkcijeSkoleContext : DbContext
    {
        public AkcijeSkoleContext()
        {
        }

        public AkcijeSkoleContext(DbContextOptions<AkcijeSkoleContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Akcije> Akcije { get; set; }
        public virtual DbSet<Aktivnosti> Aktivnosti { get; set; }
        public virtual DbSet<CvrstiNamjenskiObjekti> CvrstiNamjenskiObjekti { get; set; }
        public virtual DbSet<CvrstiObjektiZaObitavanje> CvrstiObjektiZaObitavanje { get; set; }
        public virtual DbSet<Edukacije> Edukacije { get; set; }
        public virtual DbSet<Logorista> Logorista { get; set; }
        public virtual DbSet<MaterijalnePotrebe> MaterijalnePotrebe { get; set; }
        public virtual DbSet<Mjesta> Mjesta { get; set; }
        public virtual DbSet<PolazniciAkcije> PolazniciAkcije { get; set; }
        public virtual DbSet<PolazniciSkole> PolazniciSkole { get; set; }
        public virtual DbSet<Predavaci> Predavaci { get; set; }
        public virtual DbSet<PrijavljeniPolazniciAkcije> PrijavljeniPolazniciAkcije { get; set; }
        public virtual DbSet<PrijavljeniPolazniciSkole> PrijavljeniPolazniciSkole { get; set; }
        public virtual DbSet<PrivremeniObjekti> PrivremeniObjekti { get; set; }
        public virtual DbSet<Skole> Skole { get; set; }
        public virtual DbSet<TerenskeLokacije> TerenskeLokacije { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Akcije>(entity =>
            {
                entity.HasOne(d => d.MjestoPbrNavigation)
                    .WithMany(p => p.Akcije)
                    .HasForeignKey(d => d.MjestoPbr)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Akcije_Mjesta");
            });

            modelBuilder.Entity<Aktivnosti>(entity =>
            {
                entity.HasKey(e => e.IdAktivnost)
                    .HasName("PK_aktivnost");

                entity.Property(e => e.IdAktivnost).ValueGeneratedNever();

                entity.Property(e => e.KontaktOsoba).ValueGeneratedOnAdd();

                entity.HasOne(d => d.Akcija)
                    .WithMany(p => p.Aktivnosti)
                    .HasForeignKey(d => d.AkcijaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Aktivnosti_Akcije");

                entity.HasOne(d => d.MjestoPbrNavigation)
                    .WithMany(p => p.Aktivnosti)
                    .HasForeignKey(d => d.MjestoPbr)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Aktivnosti_Mjesta");
            });

            modelBuilder.Entity<CvrstiNamjenskiObjekti>(entity =>
            {
                entity.HasKey(e => e.IdNamjenskiObjekt)
                    .HasName("PK_cvrstiNamjenskiObjekt");

                entity.Property(e => e.IdNamjenskiObjekt).ValueGeneratedNever();

                entity.HasOne(d => d.IdNamjenskiObjektNavigation)
                    .WithOne(p => p.CvrstiNamjenskiObjekti)
                    .HasForeignKey<CvrstiNamjenskiObjekti>(d => d.IdNamjenskiObjekt)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CvrstiNamjenskiObjekt_TerenskeLokacije");
            });

            modelBuilder.Entity<CvrstiObjektiZaObitavanje>(entity =>
            {
                entity.HasKey(e => e.IdObjektaZaObitavanje)
                    .HasName("PK_cvrstiObjektZaObitavanje");

                entity.Property(e => e.IdObjektaZaObitavanje).ValueGeneratedNever();

                entity.HasOne(d => d.IdObjektaZaObitavanjeNavigation)
                    .WithOne(p => p.CvrstiObjektiZaObitavanje)
                    .HasForeignKey<CvrstiObjektiZaObitavanje>(d => d.IdObjektaZaObitavanje)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CvrstiObjektiZaObitavanje_TerenskeLokacije");
            });

            modelBuilder.Entity<Edukacije>(entity =>
            {
                entity.HasKey(e => e.IdEdukacija)
                    .HasName("PK_Edukacija");

                entity.HasOne(d => d.MjestoPbrNavigation)
                    .WithMany(p => p.Edukacije)
                    .HasForeignKey(d => d.MjestoPbr)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Edukacije_Mjesta");

                entity.HasOne(d => d.Skola)
                    .WithMany(p => p.Edukacije)
                    .HasForeignKey(d => d.SkolaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Edukacije_Skole");
            });

            modelBuilder.Entity<Logorista>(entity =>
            {
                entity.HasKey(e => e.IdLogoriste)
                    .HasName("PK_logoriste");

                entity.Property(e => e.IdLogoriste).ValueGeneratedNever();

                entity.HasOne(d => d.IdLogoristeNavigation)
                    .WithOne(p => p.Logorista)
                    .HasForeignKey<Logorista>(d => d.IdLogoriste)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Logorista_TerenskeLokacije");
            });

            modelBuilder.Entity<MaterijalnePotrebe>(entity =>
            {
                entity.HasKey(e => e.IdMaterijalnePotrebe)
                    .HasName("PK_materijalnePotrebe");

                entity.HasMany(d => d.Akcije)
                    .WithMany(p => p.MaterijalnePotrebe)
                    .UsingEntity<Dictionary<string, object>>(
                        "MaterijalnePotrebeAkcije",
                        l => l.HasOne<Akcije>().WithMany().HasForeignKey("AkcijeId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_MaterijalnePotrebeAkcije_Akcije"),
                        r => r.HasOne<MaterijalnePotrebe>().WithMany().HasForeignKey("MaterijalnePotrebeId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_MaterijalnePotrebeAkcije_MaterijalnePotrebe"),
                        j =>
                        {
                            j.HasKey("MaterijalnePotrebeId", "AkcijeId");

                            j.ToTable("MaterijalnePotrebeAkcije");
                        });

                entity.HasMany(d => d.Skole)
                    .WithMany(p => p.MaterijalnePotreb)
                    .UsingEntity<Dictionary<string, object>>(
                        "MaterijalnePotrebeSkole",
                        l => l.HasOne<Skole>().WithMany().HasForeignKey("SkoleId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_MaterijalnePotrebeSkole_Skole"),
                        r => r.HasOne<MaterijalnePotrebe>().WithMany().HasForeignKey("MaterijalnePotrebId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_MaterijalnePotrebeSkole_MaterijalnePotrebe"),
                        j =>
                        {
                            j.HasKey("MaterijalnePotrebId", "SkoleId");

                            j.ToTable("MaterijalnePotrebeSkole");
                        });
            });

            modelBuilder.Entity<Mjesta>(entity =>
            {
                entity.HasKey(e => e.PbrMjesta)
                    .HasName("PK_mjesto");

                entity.Property(e => e.PbrMjesta).ValueGeneratedNever();
            });

            modelBuilder.Entity<PolazniciAkcije>(entity =>
            {
                entity.HasKey(e => new { e.Polaznik, e.AkcijaId, e.AktivnostId });

                entity.Property(e => e.Polaznik).ValueGeneratedOnAdd();

                entity.HasOne(d => d.Akcija)
                    .WithMany(p => p.PolazniciAkcije)
                    .HasForeignKey(d => d.AkcijaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PolazniciAkcije_Akcije");

                entity.HasOne(d => d.Aktivnost)
                    .WithMany(p => p.PolazniciAkcije)
                    .HasForeignKey(d => d.AktivnostId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PolazniciAkcije_Skole");
            });

            modelBuilder.Entity<PolazniciSkole>(entity =>
            {
                entity.HasKey(e => new { e.Polaznik, e.SkolaId, e.EdukacijaId });

                entity.Property(e => e.Polaznik).ValueGeneratedOnAdd();

                entity.HasOne(d => d.Edukacija)
                    .WithMany(p => p.PolazniciSkole)
                    .HasForeignKey(d => d.EdukacijaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PolazniciSkole_Edukacije");

                entity.HasOne(d => d.Skola)
                    .WithMany(p => p.PolazniciSkole)
                    .HasForeignKey(d => d.SkolaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PolazniciSkole_Skole");
            });

            modelBuilder.Entity<Predavaci>(entity =>
            {
                entity.HasKey(e => new { e.IdPredavac, e.EdukacijaId })
                    .HasName("PK_Predavaci_1");

                entity.Property(e => e.IdPredavac).ValueGeneratedOnAdd();

                entity.HasOne(d => d.Edukacija)
                    .WithMany(p => p.Predavaci)
                    .HasForeignKey(d => d.EdukacijaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Predavaci_Edukacije");
            });

            modelBuilder.Entity<PrijavljeniPolazniciAkcije>(entity =>
            {
                entity.HasKey(e => new { e.AkcijaId, e.PrijavljenClan, e.AktivnostId });

                entity.HasOne(d => d.Akcija)
                    .WithMany(p => p.PrijavljeniPolazniciAkcije)
                    .HasForeignKey(d => d.AkcijaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PrijavljeniPolazniciAkcije_Akcije");

                entity.HasOne(d => d.Aktivnost)
                    .WithMany(p => p.PrijavljeniPolazniciAkcije)
                    .HasForeignKey(d => d.AktivnostId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PrijavljeniPolazniciAkcije_Aktivnosti");
            });

            modelBuilder.Entity<PrijavljeniPolazniciSkole>(entity =>
            {
                entity.HasKey(e => new { e.SkolaId, e.EdukacijaId, e.PrijavljenClan })
                    .HasName("PK_najavljeniPolazniciSkole");

                entity.HasOne(d => d.Edukacija)
                    .WithMany(p => p.PrijavljeniPolazniciSkole)
                    .HasForeignKey(d => d.EdukacijaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PrijavljeniPolazniciSkole_Edukacije");

                entity.HasOne(d => d.Skola)
                    .WithMany(p => p.PrijavljeniPolazniciSkole)
                    .HasForeignKey(d => d.SkolaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PrijavljeniPolazniciSkole_Skole");
            });

            modelBuilder.Entity<PrivremeniObjekti>(entity =>
            {
                entity.HasKey(e => e.IdPrivremeniObjekt)
                    .HasName("PK_privremeniObjekt");

                entity.Property(e => e.IdPrivremeniObjekt).ValueGeneratedNever();

                entity.HasOne(d => d.IdPrivremeniObjektNavigation)
                    .WithOne(p => p.PrivremeniObjekti)
                    .HasForeignKey<PrivremeniObjekti>(d => d.IdPrivremeniObjekt)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PrivremeniObjekti_TerenskeLokacije");
            });

            modelBuilder.Entity<Skole>(entity =>
            {
                entity.HasOne(d => d.MjestoPbrNavigation)
                    .WithMany(p => p.Skole)
                    .HasForeignKey(d => d.MjestoPbr)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Skole_Mjesta");
            });

            modelBuilder.Entity<TerenskeLokacije>(entity =>
            {
                entity.HasKey(e => e.IdTerenskeLokacije)
                    .HasName("PK_terenskeLokacije");

                entity.HasOne(d => d.MjestoPbrNavigation)
                    .WithMany(p => p.TerenskeLokacije)
                    .HasForeignKey(d => d.MjestoPbr)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TerenskeLokacije_Mjesta");

                entity.HasMany(d => d.Akcije)
                    .WithMany(p => p.TerenskeLokacije)
                    .UsingEntity<Dictionary<string, object>>(
                        "TerenskeLokacijeAkcije",
                        l => l.HasOne<Akcije>().WithMany().HasForeignKey("AkcijeId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_TerenskeLokacijeAkcije_Akcije"),
                        r => r.HasOne<TerenskeLokacije>().WithMany().HasForeignKey("TerenskeLokacijeId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_TerenskeLokacijeAkcije_TerenskeLokacije"),
                        j =>
                        {
                            j.HasKey("TerenskeLokacijeId", "AkcijeId");

                            j.ToTable("TerenskeLokacijeAkcije");
                        });

                entity.HasMany(d => d.MaterijalnePotrebe)
                    .WithMany(p => p.TerenskeLokacije)
                    .UsingEntity<Dictionary<string, object>>(
                        "MaterijalnePotrebeTerenskeLokacije",
                        l => l.HasOne<MaterijalnePotrebe>().WithMany().HasForeignKey("MaterijalnePotrebeId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_MaterijalnePotrebeTerenskeLokacije_MaterijalnePotrebe"),
                        r => r.HasOne<TerenskeLokacije>().WithMany().HasForeignKey("TerenskeLokacijeId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_MaterijalnePotrebeTerenskeLokacije_TerenskeLokacije"),
                        j =>
                        {
                            j.HasKey("TerenskeLokacijeId", "MaterijalnePotrebeId");

                            j.ToTable("MaterijalnePotrebeTerenskeLokacije");
                        });

                entity.HasMany(d => d.Skola)
                    .WithMany(p => p.TerenskaLokacija)
                    .UsingEntity<Dictionary<string, object>>(
                        "TerenskeLokacijeSkole",
                        l => l.HasOne<Skole>().WithMany().HasForeignKey("SkolaId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_TerenskeLokacijeSkole_Skole"),
                        r => r.HasOne<TerenskeLokacije>().WithMany().HasForeignKey("TerenskaLokacijaId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_TerenskeLokacijeSkole_TerenskeLokacije"),
                        j =>
                        {
                            j.HasKey("TerenskaLokacijaId", "SkolaId");

                            j.ToTable("TerenskeLokacijeSkole");
                        });
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}